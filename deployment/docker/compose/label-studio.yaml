services:

  label-studio:
    image: heartexlabs/label-studio:latest
    container_name: label-studio
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${LABEL_STUDIO_PORT:-8080}:8080"
    environment:
      - DJANGO_DB=postgresql
      - POSTGRE_NAME=${POSTGRES_DB}
      - POSTGRE_USER=${POSTGRES_USER}
      - POSTGRE_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRE_HOST=postgres
      - POSTGRE_PORT=${POSTGRES_PORT:-5432}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-localhost}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
    volumes:
      - label-studio-data:/label-studio/data
    networks:
      - label-studio-network
      - minio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  postgres:
    image: postgres:13-alpine
    container_name: label-studio-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT_EXPOSED:-5432}:${POSTGRES_PORT:-5432}"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - label-studio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 512M

  redis:
    image: redis:6-alpine
    container_name: label-studio-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT_EXPOSED:-6379}:${REDIS_PORT:-6379}"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - label-studio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
